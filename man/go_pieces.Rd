% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/go.r
\name{go_pieces}
\alias{go_pieces}
\alias{go_board}
\alias{go_bits}
\title{Generate go boards and pieces}
\usage{
go_board(nrows = 19L, ncols = nrows, x0 = 1, y0 = 1, ..., suit = "black")

go_bits(
  ...,
  suit = 1:6,
  x = as.double(1:6),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)
}
\arguments{
\item{nrows}{Number of rows in game board}

\item{ncols}{Number of columns in game board}

\item{x0}{X coordinate for the center of the first point}

\item{y0}{Y coordinate for the center of the first point}

\item{...}{Should be left empty.}

\item{suit}{Suit value (color) of board/bit.
\code{1L} is "red", \code{2L} is "black", \code{3L} is "green", \code{4L} is "blue", \code{5L} is "yellow", and \code{6L} is "white".
Will be coerced by \code{\link[=piece_suit]{piece_suit()}}.}

\item{x, y}{Cartesian coordinates (numeric vectors)}

\item{angle}{Rotation of piece (numeric vector of degrees, counter-clockwise).
Will be coerced by \code{\link[=piece_angle]{piece_angle()}}.}

\item{length.out}{The number of pieces.
Not needed if all the arguments are the same length (or of length one)
and this length is the same as the number of desired pieces.}
}
\value{
A \code{\link[tibble:tibble]{tibble::tibble()}} data frame with the following columns:
\itemize{
\item "piece_side"
\item "suit"
\item "rank"
\item "cfg" (optional, defaults to \code{"piecepack"})
\item "x"
\item "y"
\item "angle" (optional, defaults to \code{0}).
}

This data frame is compatible with \code{\link[piecepackr:render_piece]{piecepackr::render_piece()}} and likely \code{\link[ppcli:cat_piece]{ppcli::cat_piece()}}.
}
\description{
\code{go_board()} returns an go board.
\code{go_bits()} returns go pieces.
}
\examples{
dfb <- go_board()
dfw <- go_bits(suit = "white", x = 1:19, y = 1:19)
dfk <- go_bits(suit = "black", x = 1:19, y = 19:1)
df <- rbind(dfb, dfw, dfk)
if (requireNamespace("ppcli", quietly = TRUE) &&
    packageVersion("ppcli") >= "0.2.0-1") {
  ppcli::cat_piece(df, annotate = TRUE)
}
dfb <- go_board(4L, 4L)
dfw <- go_bits(suit = "white", x = 1:4, y = 1:4)
dfk <- go_bits(suit = "black", x = 1:4, y = 4:1)
df <- rbind(dfb, dfw, dfk)
if (require("piecepackr", quietly = TRUE) &&
    packageVersion("piecepackr") >= "1.15.0-9" &&
    requireNamespace("systemfonts", quietly = TRUE) &&
    piecepackr::has_font("Dejavu Sans") &&
    piecepackr:::device_supports_unicode()) {
  grid::grid.newpage()
  envir = game_systems(background_color = "burlywood")
  pmap_piece(df, envir = envir, default.units = "in")
}
}
