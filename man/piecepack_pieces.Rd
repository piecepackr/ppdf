% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/piecepack_helpers.r
\name{piecepack_pieces}
\alias{piecepack_pieces}
\alias{piecepack_coins}
\alias{piecepack_dice}
\alias{piecepack_matchsticks}
\alias{piecepack_pawns}
\alias{piecepack_tiles}
\title{Generate piecepack pieces}
\usage{
piecepack_coins(
  ...,
  side = "face",
  piece_side = paste0("coin_", side),
  suit = rep(1:4, each = 6L),
  rank = rep.int(1:6, 4L),
  cfg = "piecepack",
  x = as.double(rep.int(1:6, 4L)),
  y = as.double(rep(4:1, each = 6L)),
  angle = 0,
  length.out = NA_integer_
)

piecepack_dice(
  ...,
  suit = 1:4,
  rank = 1L,
  cfg = "piecepack",
  x = as.double(1:4),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)

piecepack_matchsticks(
  ...,
  side = "face",
  piece_side = paste0("matchstick_", side),
  suit = rep(1:4, each = 6L),
  rank = rep.int(1:6, 4L),
  cfg = "piecepack",
  x = as.double(rep.int(1:6, 4L)),
  y = 3 * rep(4:1, each = 6L),
  angle = 0,
  length.out = NA_integer_
)

piecepack_pawns(
  ...,
  side = "face",
  piece_side = paste0("pawn_", side),
  suit = 1:4,
  cfg = "piecepack",
  x = as.double(1:4),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)

piecepack_tiles(
  ...,
  side = "face",
  piece_side = paste0("tile_", side),
  suit = rep(1:4, each = 6L),
  rank = rep.int(1:6, 4L),
  cfg = "piecepack",
  x = 2 * rep.int(1:6, 4L),
  y = 2 * rep(4:1, each = 6L),
  angle = 0,
  length.out = NA_integer_
)
}
\arguments{
\item{...}{Should be left empty.}

\item{side}{Either "face" or "back".}

\item{piece_side}{Either "tile_face" or "tile_back".}

\item{suit}{Integer vector with values between \code{1L} and \code{4L}.
\code{1L} is "suns", \code{2L} is "moons", \code{3L} is "crowns", \code{4L} is "arms".
Will be coerced by \code{\link[=piece_suit]{piece_suit()}}.}

\item{rank}{Integer vector with values between \code{1L} (null) and \code{6L} (five).
Will be coerced by \code{\link[=piece_rank]{piece_rank()}}.}

\item{cfg}{"piecepack" or perhaps "playing_cards_expansion", "dual_piecepacks_expansion", or "subpack".}

\item{x, y}{Cartesian coordinates (numeric vectors)}

\item{angle}{Rotation of piece (numeric vector of degrees, counter-clockwise).
Will be coerced by \code{\link[=piece_angle]{piece_angle()}}.}

\item{length.out}{The number of pieces.
Not needed if all the arguments are the same length (or of length one)
and this length is the same as the number of desired pieces.}
}
\value{
A \code{\link[tibble:tibble]{tibble::tibble()}} data frame with the following columns:
\itemize{
\item "piece_side"
\item "suit"
\item "rank"
\item "cfg" (optional, defaults to \code{"piecepack"})
\item "x"
\item "y"
\item "angle" (optional, defaults to \code{0}).
}

This data frame is compatible with \code{\link[piecepackr:render_piece]{piecepackr::render_piece()}} and likely \code{\link[ppcli:cat_piece]{ppcli::cat_piece()}}.
}
\description{
\code{piecepack_coins()} generates a data frame of piecepack coins.
\code{piecepack_dice()} generates a data frame of piecepack dice.
\code{piecepack_matchsticks()} generates a data frame of piecepack matchsticks.
\code{piecepack_pawns()} generates a data frame of piecepack pawns.
\code{piecepack_tiles()} generates a data frame of piecepack tiles.
}
\examples{
df_coins <- piecepack_coins()
df_dice <- piecepack_dice()
df_pawns <- piecepack_pawns()
df_tiles <- piecepack_tiles()
}
