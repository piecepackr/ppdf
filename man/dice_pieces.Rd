% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dice.r
\name{dice_pieces}
\alias{dice_pieces}
\alias{dice_dice}
\alias{d4_dice}
\alias{fudge_dice}
\alias{numeral_dice}
\alias{d8_dice}
\alias{d10_dice}
\alias{percentile_dice}
\alias{d12_dice}
\alias{d20_dice}
\title{Generate dice.}
\usage{
dice_dice(
  ...,
  suit = 1:6,
  rank = 1L,
  x = as.double(1:6),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)

d4_dice(
  ...,
  suit = 1:6,
  rank = 1L,
  x = as.double(1:6),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)

fudge_dice(
  ...,
  suit = 1:6,
  rank = 1L,
  x = as.double(1:6),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)

numeral_dice(
  ...,
  suit = 1:6,
  rank = 1L,
  x = as.double(1:6),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)

d8_dice(
  ...,
  suit = 1:6,
  rank = 1L,
  x = as.double(1:6),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)

d10_dice(
  ...,
  suit = 1:6,
  rank = 1L,
  x = as.double(1:6),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)

percentile_dice(
  ...,
  suit = 1:6,
  rank = 1L,
  x = as.double(1:6),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)

d12_dice(
  ...,
  suit = 1:6,
  rank = 1L,
  x = as.double(1:6),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)

d20_dice(
  ...,
  suit = 1:6,
  rank = 1L,
  x = as.double(1:6),
  y = 1,
  angle = 0,
  length.out = NA_integer_
)
}
\arguments{
\item{...}{Should be left empty.}

\item{suit}{Suit value (color) of dice.
\code{1L} is "red", \code{2L} is "black", \code{3L} is "green", \code{4L} is "blue", \code{5L} is "yellow", and \code{6L} is "white".
Will be coerced by \code{\link[=piece_suit]{piece_suit()}}.}

\item{rank}{Rank value of dice from \code{1L} (one) on up.
d10 zeroes are \code{10L}.
Will be coerced by \code{\link[=dice_rank]{dice_rank()}} except \code{percentile_dice()} will coerce with \code{\link[=percentile_dice_rank]{percentile_dice_rank()}} and \code{fudge_dice()} will coerce with \code{\link[=fudge_dice_rank]{fudge_dice_rank()}}.}

\item{x, y}{Cartesian coordinates (numeric vectors)}

\item{angle}{Rotation of dice (numeric vector of degrees, counter-clockwise).
Will be coerced by \code{\link[=piece_angle]{piece_angle()}}.}

\item{length.out}{The number of pieces.
Not needed if all the arguments are the same length (or of length one)
and this length is the same as the number of desired pieces.}
}
\value{
A \code{\link[tibble:tibble]{tibble::tibble()}} data frame with the following columns:
\itemize{
\item "piece_side"
\item "suit"
\item "rank"
\item "cfg" (optional, defaults to \code{"piecepack"})
\item "x"
\item "y"
\item "angle" (optional, defaults to \code{0}).
}

This data frame is compatible with \code{\link[piecepackr:render_piece]{piecepackr::render_piece()}} and likely \code{\link[ppcli:cat_piece]{ppcli::cat_piece()}}.
}
\description{
\code{dice_dice()} generates data frames for standard six-sided dice.
\code{d4_dice()}, \code{numeral_dice()}, \code{d8_dice()}, \code{d10_dice()}, \code{percentile_dice()}, \code{d12_dice()}, and \code{d20_dice()} generates data frames for the classic seven polyhedral dice.
\code{fudge_dice()} generates data frames for fudge dice.
}
\examples{
dfd <- dice_dice(suit = 1:6, rank = 1:6, x = 1:6, y = 1)
dfn <- numeral_dice(suit = 1:6, rank = 1:6, x = 1:6, y = 2)
dff <- fudge_dice(suit = 1:6, rank = rep(c("-", " ", "+"), 2L),
                  x = 1:6, y = 3)
dfd12 <- d12_dice(suit = 1:6, rank = 1:6, x = 1:6, y = 4)
df <- rbind(dfd, dfn, dff, dfd12)
if (require("piecepackr", quietly = TRUE) &&
    packageVersion("piecepackr") >= "1.15.0-1" &&
    piecepackr:::device_supports_unicode()) {
  grid::grid.newpage()
  envir = game_systems()
  pmap_piece(df, envir = envir, default.units = "in", op_scale = 0.01)
}
}
